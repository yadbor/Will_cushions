---
title: "will_data"
format: 
  html:
    self-contained: true
params:
  hide_answer: false
  show_complete_TOST: false
---

## Exploratory analysis of Will's data

This report contains R code and output intermingled using Quarto, 
based on the Literate Programming paradigm of Knuth.

The structure of these data are a little different.
This dataset has all of the observations, of which repeats A, B, C are made on
the same cushion and should be averaged.

The structure of the experiment is to compare two types of Ward2 cushion and to 
look at the effect of greater overload in the LCDOD tests.
The latter experiment is not yet complete.

## Preparation

Load the necessary libraries.

```{r}
#| echo: true
#| message: false
# Load required libraries.
library(dplyr)
library(TOSTER)
library(ggplot2)

# Set some printing options
options(digits = 3)        # Fewer significant figures because > 1Âµm is silly
options(row.names = FALSE) # don't want row numbers in tables
```

Will's data do not include density, but given the known relationship between
density & these results probably should roughly check for outliers by weighing
each cushion.

## Load the calculated results

Now load the reconstructed test results, 
rearrange them for easier automated processing and
calculate some summary statistics.

```{r}
# Read the testing results
data_file <- here::here("data", "reconstructed_2.xlsx")

# Display sheet names
sheet_names <- readxl::excel_sheets(data_file)
print(sheet_names)
```

From the available sheets, start with `hysteresis` and `lcdod`, 
the same as Liv's data.

```{r}
# Read the two sheets constructed from Will's data
sheet_names <- c("hysteresis", "lcdod")
# list the columns to use from each sheet
col_names <- list(
  hysteresis = "cushion, rep, batch, H_250, H_500",
  lcdod =  "cushion, rep, batch, lcd, L_180, L_225"
)

# Convert to long form for easier analysis,
# then combine both data sets by row and
# group by foam type, variable and the load level for each result
will_raw <- sheet_names %>%                  # Take the named sheets
  purrr::set_names() %>%                     # make them a named list
  purrr::map(                                # apply a function to each element
    function(x) {
      these_cols <- col_names[[x]] %>% 
        stringr::str_split_1(",\\s*")        # Wanted cols for this sheet
      readxl::read_excel(data_file, x) %>%   # read the named sheet
        select(!!these_cols) %>%             # only the named columns
      tidyr::pivot_longer(cols = where(is.numeric), # use the results columns
                   names_to = "level",       # column names to 'level'
                   values_to = "value"       # each value to 'value'
                  )
    }
  ) %>%
  bind_rows(.id = "var")     # combine by rows, original names in 'var'

# Unlike the Liv dataset, this contains all repeats (A, B, C). 
# These are psuedo-replicates, not true repeated measures, as they are highly
# correlated because they are made on the same cushion.
# Take the average for each cushion & measurement.
will_data <- will_raw %>% 
  group_by(var, level, batch, cushion) %>% 
  summarise(value = mean(value))  # don't drop the level group

# Now have a table with columns named
# var = lcdod or hysteresis
# cushion = cushion ID number
# batch = FW04619 or FW04621
# level = load level for measurement
# value = measurement

# Define a function to calculate the summary stats for each group.
# Return a data.frame to return multiple columns in one call.
# Original version used qnorm(), which gives the wrong numbers for small N
# and assumes is normal. Using qt() is more robust & accurate.
stats <- function(x, ci = 0.95) {
        mu <- mean(x)
        m <- median(x)
        sd <- sd(x)
        n <- length(x)
        se <- sd / sqrt(n)
        err <- qt((ci + 1)/2, df = n-1) * se
        
        data.frame(mean = mu, 
               median = m, 
               sd = sd, 
               se = se,
               n = n,
               upper = mu + err, 
               lower = mu - err
               )
    }

# Show the Summary stats for each variable,including the 95% CI
data_summary <- will_data %>%
  summarise(stats(value, ci = 0.95), .groups = "keep") %>%
  arrange(var, level, batch) # Re-order the output to be more readable

print(data_summary)
```

```{r}
# Make some simple box plots to show the spread of the data
plots <- list()
for (var_name in unique(will_data$var)) {
  plots[[var_name]] <- will_data %>%
    filter(var == var_name) %>%
    ggplot() +
    aes(y = value, x = batch, colour = batch) +
    geom_boxplot() +
    geom_jitter(colour = "black", alpha = 0.25, width = 0.1) +
    labs(title = var_name, y = var_name) +
    facet_grid(~ level, scales = "free_y")
}
print(plots)
```

## TOST or equivalence testing

Run a **T**wo **O**ne **S**ided **T**est on each comparison group 
(i.e. compare foams for each measured variable and level)


```{r}
# Want to compare the different foams at each variable and level.
# Regroup the data with the required groups them map a function to each group
# This is a cleaner & better way to do the analysis, passing a formula to
# t_TOST, with data = .x, in the same way as is done with t.test()
# Previous code appears to have some bug, but was too hard to find in that mess.

regrouped <- will_data %>% 
    ungroup() %>%        # remove the old groups first
    group_by(var, level) # then regroup by var & level

# Map the t_TOST function across each group
result_list <- regrouped %>%
    group_map(~ TOSTER::t_TOST(value ~ batch,   # compare value for each foam 
                               data = .x,      # .x is data for this group
                               paired = FALSE, 
                               eqb = mean(.x$value)/20 # +/- 5% of the mean
                               )
              )

# Get the group names & use to name the result list
names(result_list) <- regrouped %>%
  group_keys() %>%                   # get the keys from the grouping
  mutate(id = paste(var, level)) %>% # join the keys columns together
  pull(id)                           # extract the result column on it's own

```


```{r}
# This code has been cleaned up as well, using purrr::pwalk and just putting 
# the names in a second parallel list.
# Also made the headings between each test stand out a bit more 

# Define a function to print each results a bit nicer
# Prints some blank lines, the group name, padded to w characters with '='
# then the actual results
print_group <- function(group, content) {
  w <- 30
  separator <- strrep("=", w)
  wide_name <- stringr::str_pad(paste0(group, " "), # add a trailing space
                                width = w,
                                side = "right",
                                pad = "=")          # pad out to w chars wide
  # Use cat() for the header to get control over new lines etc.
  cat("\n\n",         
      separator, "\n",
      wide_name, "\n",
      separator, "\n"
      )
  # cat() can't handle complex objects, so use print()
  print(content)
}

# Get the group names & use to name the result list
result_names <- regrouped %>%
  group_keys() %>%                   # get the keys from the grouping
  mutate(id = paste(var, level)) %>% # join the keys columns together
  pull(id)                           # extract the result column on it's own

# Summary results
result_summary <- purrr::map(result_list, \(x) c(x$TOST$p.value)) %>% 
  bind_rows() %>% 
  t() %>% 
  as.data.frame() %>%  
  setNames(c("t.test", "eq_lower", "eq_upper")) %>% 
  tibble::rownames_to_column("experiment") %>% 
  tidyr::separate(col = experiment, into = c("variable", "level"), sep = " ") %>%
  mutate(different = ifelse(t.test < 0.05, "SIG", ""), 
         equivalent = ifelse((eq_lower < 0.05) & (eq_upper < 0.05), "SIG", ""))

print(result_summary)

if (params$show_complete_TOST) {
  # Print complete results
  purrr::pwalk(list(result_names, result_list), print_group)
}
```


`r if (params$hide_answer) "::: {.content-hidden}"`

## Possible Issues

Whys does `lcdod` appear to have a trend over time?
**Answer**: It doesn't any more. I think it was an artefact of the order in the original spreadsheet.

```{r}

will_data %>% ggplot() + 
  aes(x = cushion, y = value, colour = batch) + 
  geom_point() + 
  facet_grid(level ~ ., scales = "free_y")

```

`r if (params$hide_answer) ":::"`
